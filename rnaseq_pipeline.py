#!/usr/bin/env python3

import os
import subprocess
import argparse

def run_star(fastq1, fastq2, index_dir, output_dir, threads, is_paired):
    """ Run STAR to align FASTQ files to the reference genome. """
    
    # Create the STAR output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Prepare STAR command
    star_cmd = [
        "STAR",
        "--runThreadN", str(threads),
        "--genomeDir", index_dir,
        "--outFileNamePrefix", os.path.join(output_dir, "STAR_"),
        "--outSAMtype", "BAM", "SortedByCoordinate",
        "--quantMode", "GeneCounts"
    ]

    # Append FASTQ files based on whether it's paired-end or single-end
    if is_paired:
        star_cmd += ["--readFilesIn", fastq1, fastq2]
    else:
        star_cmd += ["--readFilesIn", fastq1]

    # Run STAR
    print(f"Running STAR with command: {' '.join(star_cmd)}")
    subprocess.run(star_cmd, check=True)

def run_featurecounts(bam_file, gtf_file, output_file, threads, is_paired):
    """ Run featureCounts to count reads mapped to features. """
    
    featurecounts_cmd = [
        "featureCounts",
        "-T", str(threads),
        "-a", gtf_file,
        "-o", output_file,
        "-t", "exon",
        "-g", "gene_id"
    ]

    if is_paired:
        featurecounts_cmd += ["-p"]

    featurecounts_cmd.append(bam_file)

    # Run featureCounts
    print(f"Running featureCounts with command: {' '.join(featurecounts_cmd)}")
    subprocess.run(featurecounts_cmd, check=True)

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="RNA-Seq Pipeline: FASTQ to featureCounts using STAR and featureCounts.")
    parser.add_argument("--fastq1", required=True, help="Path to FASTQ file (for single-read) or FASTQ file 1 (for paired-end).")
    parser.add_argument("--fastq2", default=None, help="Path to FASTQ file 2 (for paired-end data).")
    parser.add_argument("--index-dir", required=True, help="Path to STAR genome index directory.")
    parser.add_argument("--gtf-file", required=True, help="Path to the GTF annotation file.")
    parser.add_argument("--output-dir", required=True, help="Directory to store the output files.")
    parser.add_argument("--threads", type=int, default=4, help="Number of threads to use.")
    
    args = parser.parse_args()

    # Determine if the data is paired-end or single-end
    is_paired = True if args.fastq2 else False

    # Run STAR to align reads to the genome
    run_star(args.fastq1, args.fastq2, args.index_dir, args.output_dir, args.threads, is_paired)

    # The output BAM file generated by STAR
    bam_file = os.path.join(args.output_dir, "STAR_Aligned.sortedByCoord.out.bam")

    # The output file for featureCounts
    featurecounts_output = os.path.join(args.output_dir, "gene_counts.txt")

    # Run featureCounts to generate gene counts
    run_featurecounts(bam_file, args.gtf_file, featurecounts_output, args.threads, is_paired)

if __name__ == "__main__":
    main()
